-- Was not made by me
local player = game.Players.LocalPlayer
if not game:IsLoaded() then
    game.Loaded:Wait()
end

local workspace = game.Workspace
local character = player.Character or player.CharacterAdded:Wait()
local root = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

local records = {}
local floor = {}
local igtable = {character}
local falltime = 0
local start = tick()

local function isfalling(rootr)
    if rootr then
        local isfall = rootr.AssemblyLinearVelocity.Y > 10 or rootr.AssemblyLinearVelocity.Y < -10
        return isfall
    end
    return false
end

local function ignorenoncollide(rootr)
    igtable = {character}
    local parts = workspace:GetPartBoundsInRadius(rootr.Position, 10)
    for _, v in pairs(parts) do
        if not v.CanCollide then
            table.insert(igtable, v)
        end
    end
end

local function removenonstandable()
    for i = #records, 1, -1 do
        local v = records[i]
        local ray = Ray.new(v.Position, Vector3.new(0, -10, 0))
        local part = workspace:FindPartOnRayWithIgnoreList(ray, igtable, false, false)
        if not part then
            table.remove(records, i)
            table.remove(floor, i)
        end
    end
end

local function isair(rootr)
    local ray = Ray.new(rootr.Position, Vector3.new(0, -100000, 0))
    local part = workspace:FindPartOnRayWithIgnoreList(ray, igtable, false, false)
    return not part
end

local function stopuntilpart()
    for i = #floor, 1, -1 do
        if floor[i] ~= Enum.Material.Air then
            return records[i], i
        end
    end
    return records[#floor], #floor
end

while task.wait(0.35) do
    character = player.Character or player.CharacterAdded:Wait()
    root = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    
    if isfalling(root) and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and humanoid:GetState() == Enum.HumanoidStateType.Freefall then
        falltime = tick() - start
    else
        falltime = 0
        start = tick()
    end
    
    if root and humanoid then
        table.insert(records, root.CFrame)
        table.insert(floor, humanoid.FloorMaterial)
        
        ignorenoncollide(root)
        removenonstandable()
        
        if root.Position.Y - 20 < workspace.FallenPartsDestroyHeight then
            falltime = 2
        end
        
        if isair(root) and humanoid.Health > 0 and falltime > 2 then
            local v, i = stopuntilpart()
            if v then
                for _, v2 in pairs(character:GetChildren()) do
                    if v2:IsA("BasePart") then
                        v2.Velocity = Vector3.new()
                        v2.RotVelocity = Vector3.new()
                    end
                end
                root.CFrame = v
                table.remove(records, i)
                table.remove(floor, i)
            elseif root.Position.Y - 20 < workspace.FallenPartsDestroyHeight then
                root.Velocity = Vector3.new(0, 20 * root.Mass, 0)
            end
        end
    end
end
